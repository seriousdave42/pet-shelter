{"version":3,"sources":["components/PetList.js","views/Main.js","components/PetForm.js","views/NewPet.js","components/AdoptButton.js","views/PetDetail.js","views/Update.js","App.js","serviceWorker.js","index.js"],"names":["PetList","props","pets","className","scope","map","pet","i","key","petName","petType","to","_id","Main","useState","setPets","loaded","setLoaded","useEffect","axios","get","then","res","data","catch","err","console","log","AuthorForm","initialPet","petHandler","errors","submit","setPet","onChangeHandler","e","target","name","value","onSubmit","preventDefault","error","type","onChange","petDesc","petSkill1","petSkill2","petSkill3","NewPet","setErrors","PetForm","post","navigate","response","errorResponse","errorArr","Object","keys","push","message","AdoptButton","petID","successCallback","onClick","delete","PetDetail","id","badID","setBadID","Update","put","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAmCeA,EAhCC,SAAAC,GAAU,IAEfC,EAAQD,EAARC,KAEP,OACI,6BACI,2BAAOC,UAAU,oDACb,+BACI,4BACI,wBAAIC,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,aAGR,+BACKF,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACN,wBAAIC,IAAKD,GACL,4BAAKD,EAAIG,SACT,4BAAKH,EAAII,SACT,4BACI,kBAAC,IAAD,CAAMC,GAAE,eAAUL,EAAIM,MAAtB,WACA,qCACA,kBAAC,IAAD,CAAMD,GAAE,eAAUL,EAAIM,IAAd,UAAR,iBCKjBC,EAzBF,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAERZ,EAFQ,KAEFa,EAFE,OAGaD,oBAAS,GAHtB,mBAGRE,EAHQ,KAGAC,EAHA,KAcf,OATAC,qBAAU,WACNC,IAAMC,IAAI,kCACLC,MAAK,SAAAC,GACFP,EAAQO,EAAIC,KAAKrB,MACjBe,GAAU,MAEbO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,IAGC,6BACI,sEACA,6BACCT,GAAU,kBAAC,EAAD,CAASd,KAAMA,IAC1B,6BACA,kBAAC,IAAD,CAAMS,GAAG,YAAT,8B,cC4BGiB,EAnDI,SAAC3B,GAAW,IAEpB4B,EAA0C5B,EAA1C4B,WAAYC,EAA8B7B,EAA9B6B,WAAYC,EAAkB9B,EAAlB8B,OAAQC,EAAU/B,EAAV+B,OAFb,EAGJlB,mBAASe,GAHL,mBAGnBvB,EAHmB,KAGd2B,EAHc,KAKpBC,EAAkB,SAAAC,GACpBF,EAAO,eACA3B,EADD,eAED6B,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UASlC,OACI,6BACI,0BAAMnC,UAAU,gBAAgBoC,SAPhB,SAAAJ,GACpBA,EAAEK,iBACFV,EAAWxB,KAMFyB,EAAO1B,KAAI,SAACoC,EAAOlC,GAAR,OAAc,uBAAGC,IAAKD,EAAGJ,UAAU,eAAesC,MAC9D,yBAAKtC,UAAU,cACX,4CACA,2BAAOuC,KAAK,OAAOvC,UAAU,eAAekC,KAAK,UAAUC,MAAOhC,EAAIG,QAASkC,SAAU,SAAAR,GAAC,OAAED,EAAgBC,OAEhH,yBAAKhC,UAAU,cACX,4CACA,2BAAOuC,KAAK,OAAOvC,UAAU,eAAekC,KAAK,UAAUC,MAAOhC,EAAII,QAASiC,SAAU,SAAAR,GAAC,OAAED,EAAgBC,OAEhH,yBAAKhC,UAAU,cACX,kDACA,2BAAOuC,KAAK,OAAOvC,UAAU,eAAekC,KAAK,UAAUC,MAAOhC,EAAIsC,QAASD,SAAU,SAAAR,GAAC,OAAED,EAAgBC,OAEhH,yBAAKhC,UAAU,cACX,qDACA,2BAAOuC,KAAK,OAAOvC,UAAU,eAAekC,KAAK,YAAYC,MAAOhC,EAAIuC,UAAWF,SAAU,SAAAR,GAAC,OAAED,EAAgBC,OAEpH,yBAAKhC,UAAU,cACX,qDACA,2BAAOuC,KAAK,OAAOvC,UAAU,eAAekC,KAAK,YAAYC,MAAOhC,EAAIwC,UAAWH,SAAU,SAAAR,GAAC,OAAED,EAAgBC,OAEpH,yBAAKhC,UAAU,cACX,qDACA,2BAAOuC,KAAK,OAAOvC,UAAU,eAAekC,KAAK,YAAYC,MAAOhC,EAAIyC,UAAWJ,SAAU,SAAAR,GAAC,OAAED,EAAgBC,OAEpH,4BAAQO,KAAK,SAASvC,UAAU,mBAAhC,UAAsD6B,GAAtD,OAA+D1B,EAAIG,aCJpEuC,EAtCA,WAAO,IAAD,EAEWlC,mBAAS,IAFpB,mBAEViB,EAFU,KAEFkB,EAFE,KAoBjB,OACI,6BACI,0DACA,6BACA,kBAACC,EAAD,CAASrB,WAAY,CACjBpB,QAAS,GACTC,QAAS,GACTkC,QAAS,GACTC,UAAW,GACXC,UAAW,GACXC,UAAW,IACZjB,WA3BI,SAAAxB,GACXa,IAAMgC,KAAK,gCAAiC7C,GACvCe,MAAK,SAAAC,GACF8B,YAAS,QAEZ5B,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAAI4B,UAGhB,IAFA,IAAMC,EAAgB7B,EAAI4B,SAAS9B,KAAKQ,OAClCwB,EAAW,GACjB,MAAkBC,OAAOC,KAAKH,GAA9B,eAA8C,CAAzC,IAAM9C,EAAG,KACV+C,EAASG,KAAKJ,EAAc9C,GAAKmD,SAErCV,EAAUM,OAeSvB,OAAO,OAAOD,OAAQA,IAC7C,6BACA,kBAAC,IAAD,CAAMpB,GAAG,KAAT,kBCnBGiD,EAhBK,SAAA3D,GAAU,IAEnB4D,EAAmC5D,EAAnC4D,MAAOpD,EAA4BR,EAA5BQ,QAASqD,EAAmB7D,EAAnB6D,gBAQvB,OACI,4BAAQ3D,UAAU,iBAAiB4D,QAPtB,SAAA5B,GACbhB,IAAM6C,OAAO,iCAAiCH,GACzCxC,MAAK,SAAAC,GAAG,OAAIwC,OACZtC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAI9B,SAA6DhB,ICkDtDwD,EA1DG,SAAC,GAAU,IAATC,EAAQ,EAARA,GAAQ,EAEFpD,mBAAS,IAFP,mBAEjBR,EAFiB,KAEZ2B,EAFY,OAGInB,oBAAS,GAHb,mBAGjBE,EAHiB,KAGTC,EAHS,OAIEH,oBAAS,GAJX,mBAIjBqD,EAJiB,KAIVC,EAJU,KAkBxB,OAZAlD,qBAAU,WACNC,IAAMC,IAAI,iCAAmC8C,GACxC7C,MAAK,SAAAC,GACFW,EAAOX,EAAIC,KAAKjB,KAChBW,GAAU,MAEbO,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZ2C,GAAS,QAElB,CAACF,IAGA,6BACKC,GACG,6BACI,wEACA,kBAAC,IAAD,CAAMxD,GAAG,KAAT,UAGNwD,GAASnD,GACX,6BACI,6CAAmBV,EAAIG,SACvB,kBAAC,EAAD,CAAaoD,MAAOvD,EAAIM,IAAKH,QAASH,EAAIG,QAASqD,gBAAiB,kBAAMV,YAAS,QACnF,6BACA,2BAAOjD,UAAU,uBACb,4BACI,yCACA,4BAAKG,EAAII,UAEb,4BACI,gDACA,4BAAKJ,EAAIsC,UAEb,4BACI,uCACA,4BACI,2BAAItC,EAAIuC,WACR,2BAAIvC,EAAIwC,WACR,2BAAIxC,EAAIyC,cAIpB,6BACA,kBAAC,IAAD,CAAMpC,GAAE,eAAUL,EAAIM,IAAd,UAAR,QACA,qCACA,kBAAC,IAAD,CAAMD,GAAG,KAAT,mBCED0D,EAvDA,SAACpE,GAAW,IACfiE,EAAOjE,EAAPiE,GADc,EAEApD,mBAAS,IAFT,mBAEfR,EAFe,KAEV2B,EAFU,OAGMnB,oBAAS,GAHf,mBAGfE,EAHe,KAGPC,EAHO,OAIMH,mBAAS,IAJf,mBAIfiB,EAJe,KAIPkB,EAJO,OAKInC,oBAAS,GALb,mBAKfqD,EALe,KAKRC,EALQ,KAOtBlD,qBAAU,WACNC,IAAMC,IAAI,iCAAmC8C,GACxC7C,MAAK,SAAAC,GACFW,EAAO,eAAIX,EAAIC,KAAKjB,MACpBW,GAAU,MAEbO,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZ2C,GAAS,QAElB,CAACF,IAkBJ,OACI,6BACKC,GACG,6BACI,wEACA,kBAAC,IAAD,CAAMxD,GAAG,KAAT,SAGPK,GACG,6BACI,oCAAUV,EAAIG,SACd,kBAACyC,EAAD,CAASrB,WAAYvB,EAAKwB,WA3BxB,SAAAxB,GACda,IAAMmD,IAAI,iCAAiCJ,EAAI5D,GAC1Ce,MAAK,SAAAC,GACFI,QAAQC,IAAI,aAAcL,GAC1B8B,YAAS,QAAQc,MAEpB1C,OAAM,SAAAC,GAGH,IAFA,IAAM6B,EAAgB7B,EAAI4B,SAAS9B,KAAKQ,OAClCwB,EAAW,GACjB,MAAkBC,OAAOC,KAAKH,GAA9B,eAA8C,CAAzC,IAAM9C,EAAG,KACV+C,EAASG,KAAKJ,EAAc9C,GAAKmD,SAErCV,EAAUM,OAe2CvB,OAAO,QAAQD,OAAQA,IACxE,6BACA,kBAAC,IAAD,CAAMpB,GAAG,KAAT,mBC/BL4D,MAdf,WACE,OACE,yBAAKpE,UAAU,OACb,2CACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMqE,KAAK,MACX,kBAAC,EAAD,CAAQA,KAAK,aACb,kBAAC,EAAD,CAAWA,KAAK,aAChB,kBAAC,EAAD,CAAQA,KAAK,qBCJDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEd9D,OAAM,SAAAiB,GACLf,QAAQe,MAAMA,EAAMkB,c","file":"static/js/main.3b174940.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from '@reach/router';\r\n\r\nconst PetList = props => {\r\n\r\n    const {pets} = props;\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"col-8 mx-auto table table-striped table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {pets.map((pet, i) => \r\n                        <tr key={i}>\r\n                            <td>{pet.petName}</td>\r\n                            <td>{pet.petType}</td>\r\n                            <td>\r\n                                <Link to={`/pet/${pet._id}`}>Details</Link>\r\n                                <span> | </span>\r\n                                <Link to={`/pet/${pet._id}/edit`}>Edit</Link>\r\n                            </td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default PetList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from '@reach/router';\r\nimport PetList from '../components/PetList';\r\n\r\nconst Main = () => {\r\n\r\n    const [pets, setPets] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/pets')\r\n            .then(res => {\r\n                setPets(res.data.pets);\r\n                setLoaded(true);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n\r\n    return(\r\n        <div>\r\n            <h2>These pets are looking for a good home</h2>\r\n            <hr />\r\n            {loaded && <PetList pets={pets} />}\r\n            <hr />\r\n            <Link to=\"/pet/new\">Add a pet to the shelter</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, { useState } from 'react';\r\n\r\nconst AuthorForm = (props) => {\r\n\r\n    const {initialPet, petHandler, errors, submit} = props;\r\n    const [pet, setPet] = useState(initialPet);\r\n\r\n    const onChangeHandler = e => {\r\n        setPet({\r\n            ...pet,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n    \r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        petHandler(pet);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"col-4 mx-auto\" onSubmit={onSubmitHandler}>\r\n                {errors.map((error, i) => <p key={i} className=\"text-danger\">{error}</p>)}\r\n                <div className=\"form-group\">\r\n                    <label>Pet Name </label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"petName\" value={pet.petName} onChange={e=>onChangeHandler(e)}></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Pet Type </label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"petType\" value={pet.petType} onChange={e=>onChangeHandler(e)}></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Pet Description</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"petDesc\" value={pet.petDesc} onChange={e=>onChangeHandler(e)}></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Skill 1 (optional)</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"petSkill1\" value={pet.petSkill1} onChange={e=>onChangeHandler(e)}></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Skill 2 (optional)</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"petSkill2\" value={pet.petSkill2} onChange={e=>onChangeHandler(e)}></input>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Skill 3 (optional)</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"petSkill3\" value={pet.petSkill3} onChange={e=>onChangeHandler(e)}></input>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">{`${submit}${pet.petName}`}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AuthorForm;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PetForm from '../components/PetForm';\r\nimport {navigate, Link} from '@reach/router';\r\n\r\nconst NewPet = () => {\r\n\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    const newPet = pet => {\r\n        axios.post(\"http://localhost:8000/api/pet\", pet)\r\n            .then(res => {\r\n                navigate(\"/\")\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n                const errorResponse = err.response.data.errors;\r\n                const errorArr = [];\r\n                for (const key of Object.keys(errorResponse)) {\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                setErrors(errorArr)\r\n            });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2>Know a pet needing a home?</h2>\r\n            <hr />\r\n            <PetForm initialPet={{\r\n                petName: \"\",\r\n                petType: \"\",\r\n                petDesc: \"\",\r\n                petSkill1: \"\",\r\n                petSkill2: \"\",\r\n                petSkill3: \"\"\r\n            }} petHandler={newPet} submit=\"Add \" errors={errors} />\r\n            <hr />\r\n            <Link to=\"/\">Back to home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPet;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AdoptButton = props => {\r\n\r\n    const {petID, petName, successCallback} = props;\r\n\r\n    const adoptPet = e => {\r\n        axios.delete(\"http://localhost:8000/api/pet/\"+petID)\r\n            .then(res => successCallback())\r\n            .catch(err => console.log(err));\r\n    }\r\n    \r\n    return (\r\n        <button className=\"btn btn-danger\" onClick={adoptPet}>Adopt {petName}</button>\r\n    )\r\n        \r\n}\r\n\r\nexport default AdoptButton","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\nimport { Link } from '@reach/router';\r\nimport AdoptButton from '../components/AdoptButton';\r\n\r\nconst PetDetail = ({id}) => {\r\n\r\n    const [pet, setPet] = useState({});\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [badID, setBadID] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api/pet/\" + id)\r\n            .then(res => {\r\n                setPet(res.data.pet)\r\n                setLoaded(true)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setBadID(true)\r\n            });\r\n    }, [id])\r\n\r\n    return (\r\n        <div>\r\n            {badID &&\r\n                <div>\r\n                    <h3>We're sorry, this pet page doesn't exist</h3>\r\n                    <Link to=\"/\">Home</Link>\r\n                </div>\r\n            }\r\n            {!badID && loaded &&\r\n            <div>\r\n                <h2>Details about {pet.petName}</h2>\r\n                <AdoptButton petID={pet._id} petName={pet.petName} successCallback={() => navigate(\"/\")}/>\r\n                <hr />\r\n                <table className=\"table col-5 mx-auto\">\r\n                    <tr>\r\n                        <td>Pet type:</td>\r\n                        <td>{pet.petType}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Pet description:</td>\r\n                        <td>{pet.petDesc}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Skills:</td>\r\n                        <td>    \r\n                            <p>{pet.petSkill1}</p>\r\n                            <p>{pet.petSkill2}</p>\r\n                            <p>{pet.petSkill3}</p>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n                <hr />\r\n                <Link to={`/pet/${pet._id}/edit`}>Edit</Link>\r\n                <span> | </span>\r\n                <Link to=\"/\">Back to Home</Link>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PetDetail;","import React, { useState, useEffect } from 'react';\r\nimport {Link, navigate} from '@reach/router';\r\nimport axios from 'axios';\r\nimport PetForm from '../components/PetForm';\r\n\r\nconst Update = (props) => {\r\n    const { id } = props;\r\n    const [pet, setPet] = useState({});\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [errors, setErrors] = useState([]);\r\n    const [badID, setBadID] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api/pet/\" + id)\r\n            .then(res => {\r\n                setPet({...res.data.pet});\r\n                setLoaded(true);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setBadID(true)\r\n            });\r\n    }, [id])\r\n\r\n    const updatePet = pet => {\r\n        axios.put(\"http://localhost:8000/api/pet/\"+id, pet)\r\n            .then(res=> {\r\n                console.log(\"Response: \", res);\r\n                navigate(\"/pet/\"+id);\r\n            })\r\n            .catch(err => {\r\n                const errorResponse = err.response.data.errors;\r\n                const errorArr = [];\r\n                for (const key of Object.keys(errorResponse)) {\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                setErrors(errorArr)\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {badID &&\r\n                <div>\r\n                    <h3>We're sorry, this pet page doesn't exist</h3>\r\n                    <Link to=\"/\">Home</Link>\r\n                </div>\r\n            }\r\n            {loaded && \r\n                <div>\r\n                    <h2>Edit {pet.petName}</h2>\r\n                    <PetForm initialPet={pet} petHandler={updatePet} submit=\"Edit \" errors={errors}/>\r\n                    <hr />\r\n                    <Link to=\"/\">Back to home</Link>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Update;  \r\n","import React from 'react';\nimport {Router} from '@reach/router';\nimport './App.css';\nimport Main from './views/Main';\nimport NewPet from './views/NewPet';\nimport PetDetail from './views/PetDetail';\nimport Update from './views/Update';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Pet Shelter</h1>\n      <Router>\n        <Main path=\"/\" />\n        <NewPet path=\"/pet/new\" />\n        <PetDetail path=\"/pet/:id\" />\n        <Update path=\"/pet/:id/edit\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}